//不用写！！！
//也不要求会写！！！！
//只要会运行就行！！！

//声明常量http，引入nodejs标准模块http模块，将引入的对象保存在http常量中
const http=require("http");
//创建一个服务器端的程序server，监听一个指定的端口。
var server=http.createServer(
  //当这个端口收到从客户端发出的请求时，自动调用回调函数
  //回调函数的req参数，保存了本次请求相关的信息
  //回调函数的res参数，保存了本次响应相关的信息
  function(req,res){
    //只要服务端程序收到任何请求
    //都返回一个字符串响应结果:"北京 晴 26~32"
    //因为用的不是express框架，所以，不能用res.send()只能写res.write() res.end()
    var weather="北京 晴 26~32";
    //修改响应头中的配置信息
    //告诉客户端浏览器
    //            响应成功
    res.writeHead(200,{
    //服务器返回的内容类型为普通文本，且字符编码是utf-8格式
      "Content-Type":"text/plain;charset=utf-8",
    //结果: 浏览器就会自动用utf-8格式解析服务器端返回的内容
    //将服务器端返回结果中的寄件人地址伪装成和客户端网页地址相同
      "Access-Control-Allow-Origin":"http://127.0.0.1:5500"
    //结果: 服务器端返回的结果中寄件人被伪装成http://127.0.0.1:5500，和客户端所在地址完全相同，就能顺利通过浏览器的CORS策略检查！
    })
    //将北京的天气字符串，先写入响应对象中暂存。
    res.write(weather);
    //让响应对象res，将保存的北京天气字符串返回给客户端
    res.end();
  }
)
//让服务器端程序server监听3200端口
server.listen(3200);
//如何启动服务端程序: 
//右键单击16_server.js
//选择在xx终端中打开
//等弹出窗口中出现C:\xxx\xxxx > 才能继续输入
//输入node 16_server.js
//手工打开浏览器，地址栏输入: http://localhost:3200
//结果: 看到服务器端程序返回的北京天气字符串
//无论以上服务器端程序作了任何修改，保存后，都要重启服务端: 
//  先Ctrl+C 退出旧的服务器端程序
//  再运行node 16_server.js
//  重新刷新浏览器中的页面